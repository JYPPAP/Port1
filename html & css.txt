/* #문제 0
  test의 결과값은 소숫점(2.2)으로 출력된다. 그러면 정수값과 나머지를 이용해서 끝부분이 오른쪽 끝에 올 수 있도록 만들 수 있을 것 같다. 
  너비가 1000이니 next 버튼을 눌렀을 때 .2 * 100px 을 이동시키면 될 것 같다.
*/

#
너비를 가변적으로 적용을 해야 할 때
높이값을 주면 안되는 이유는
height를 직접 지정하면 높이값이 고정이 되기 때문에
padding-top에 %를 줘서 가변적으로 변할 수 있도록 만들어야 한다.
그러면 부모요소의 width를 줄였을 때 알아서 보이는 높이도 줄어들게 된다.
16:9의 비율을 만들 때는
부모요소에 w: ~px;
자식요소에 h0, pt56.25%를 주면 된다.

# 미디어 쿼리
선택자 우선순위에 대해서 생각을 많이 해봐야 한다.
이게 문제면 정상적으로 바꾼거 같아도 값이 적용이 안된다.


1024 사이즈 미디어 쿼리를 복사해서 css에 main_medium.css(@media (max-width: 1024)가 없는 상태로 새로 파일을 하나 만든다.

html에서 link로 main_medium.css를 가져오도록 선언을 한 다음.

<link rel='stylesheet' media='(max-width: 1024px' href='css/main_medium.css'> 로 선언하면 된다.

파일에 @media 규칙을 쓰지 않고 html 파일 내부에 link 파일을 불러올 때 작성한다. ㅗㅜㅑ


# 
너비나 높이값을 지정할 때 100%를 사용하면 부모요소만큼 적용된다.
auto를 사용하면 자식요소의 너비나 높이만큼 적용된다.

이건 알고 있던 사항이고, 그렇다면 부모요소에 영향을 받는게 무슨 문제가 있을까.
부모요소에 p나 m 값이 있고, 자식요소가 그 p나 m값에 의해서 안쪽으로 크기가 작아진 상태에서 자식요소의 크기를 늘리기 위해 p나 m에 대해서 -px값을 적용한다고 할 때, 자식요소의 크기를 100%로 한다면 자식요소가 화면 중앙에 배치되지 않고 왼쪽으로 치우치게 된다.
그 것을 해결하기 위해서는 자식요소의 너비를 auto로 해줘야 한다.
자식요소의 너비
>
부모요소에 padding 값이 좌우20px가 있다고 가정할 때,
자식요소에서 너비값을 100%로 한다면, 부모요소의 너비값에서 좌우 20px씩 빠진 값이 너비가 된다.
>
일단 부모요소에 padding 값이 있고, 자식요소를 부모요소에서 넣은 padding값만큼 빼서 100%의 영역을 차지하게 만드는 방법에 대해서는 알겠다. 그런데 왜 100%일 때 margin과 padding값이 적용되지 않는걸까? 너비가 고정되어있다고는 해도 padding이나 margin값을 넣어주면 위치는 바뀌어야 하는거 아닐까?
> 바뀌네 ㅎㅎ
위치는 바뀌지만 너비는 바뀌지 않는다. 왜냐하면 고정이기 때문이다.
ㅎㅎ 이해 완료~
padding에 0 -20px를 하면 바뀌는게 없다.
하지만 margin 0 -20px를 하면 얘가 left: 0; 의 위치로 붙어버린다. 너비는 그대로에 위치만 바뀐다.

**css를 만들 때 화면의 위쪽부터 순서대로 만들어야 좋다.

#VSCode 사용 팁
Ctrl + P 
커맨드 팔레트 열기
> 디렉토리를 파일명으로 이동할 수 있음
>> @을 붙여서 파일 내부에서 원하는 심볼로 이동할 수 있음
>>> #을 붙여서 전역 심볼을 검색할 수 있다.
      -만약에 .box_inner를 검색하면 왜인지 모르게 css나 scss에 있는 것만 나온다.
      -- 모든 이름을 똑바로 검색하지 않고 있는 알파벳들만 검색해도 된다 binr 같은 방식으로 > 라고 하긴 하는데 안됨. 검색의 기준이 뭐 함수명 같은건가 봄.

Ctrl + G
라인넘버로 커서 이동

Ctrl + L
한 줄 선택하기

Ctrl + SHIFT + .
함수라고 해야하나... 경로별로 이동할 수 있음.
부모나 자식요소, 형제요소같이 요소 간의 이동

Ctrl + D + Ctrl + D
선택한 부분과 동일한 부분이 있으면 똑같이 선택해 준다.

Ctrl + D + Ctrl + F
선택한 부분이 쌓여진 부분을 선택해준다.
예를들어 div>ul>li>a+i+b 의 형태이고
b 안에서 선택을 하면 b 안쪽 > a, i, b가 전부 선택 > li까지 선택 
과 같이 늘어나는 느낌으로 선택이 되는 것 같다. 부모요소로 타고 올라가는 느낌이며
html 파일에서만 정상작동한다.
js나 css는 안됨.

Ctrl + `
터미널 창을 열 수 있으며, 터미널을 분할하거나 다른 터미널을 사용할 수 있다.

SHIFT + ALT + F12
파일 내부에서 하이라이트 된 요소가 어디어디에 들어있는지 검색할 수 있다.


# CSS Tip
Firefox를 사용하면 개발자 도구에서 코드수정을 할 수 있다. 그림 형태에서.
코딩을 하는데 좀 더 효과적인 부분들이 있다.

아이템을 중앙정렬 할 때는
display: flex
js:c
ai:c
를 이용해서 중앙정렬을 할 수 있지만 별로다
grid가 훨씬 좋다.
d:grid
grid-template-columns: 1fr 500px 1fr;
grid-template-rows: 100px 200px;
place-items: center;
와 같은 형태로 좀 더 짧게 만들 수 있다.

미디어쿼리를 사용할 때 최소값과, 최대값, 일반적인 값에 대해서 짧게 줄일 수 있다.
width: clamp(200px, 50%, 600px);와 같은 형태이다.
600px 이하일 때는 200px로
1200px 이상일 때는 800px로 지정된다.
중간일 때는 50%로 변경된다.

Windows + . 을 누르면 나오는 이모지를 이용해서
클래스명을 만들 수 있다. 그런데 다른 사람들이 이해하기 힘들어질 수 있다.

이미지나 비디오의 비율 정하기
비율을 정하고 싶은 요소에 
aspect-ratio: 16/9;
라고 입력하게 되면 16:9의 비율로 왔다갔다 하게 된다.

CSS로 변수같은 것을 사용할 수 있는데.
만약 동일한 색을 지정해야 한다면
:root {
  를 통해서 루트 셀렉터를 선언하고
  --text-color: rgb(255,0,0);
  과 같이 값을 지정할 수 있으며
  --r: 255;
  --g: 0;
  --b: 0;
  --text-color: rgb(var(--r), var(--g), var(--b));
  와 같은 형태로 만들 수도 있다.
}
p {
  color: var(--text-color);
  의 형태로 사용할 수 있다.
}
h1 {
  --text-color: green;
  의 형태처럼 지역변수로 만들 수 있다.
  color: var(--text-color);
  의 형태로 사용할 수 있다.
}

CSS에서 calc 활용하기
기본적인 형태는
calc(2px + 2px);
와 같다.

약간 활용하면
width: calc(100vw - 80px);
font-size: calc(1rem * 1.25);
padding: calc(5% + 2px);
와 같이 만들 수 있다.


애니메이션 요소를 만든다고 가정할 때
i 클래스에 공통 클래스를 지정했다고 하면

다른 클래스로 딜레이를 줘서 떨어뜨리는 방법도 있겠지만.
그게 아니라 style를 이용해서 순서를 정해주고
<i class="drop" style="--order: 1">1</i>
<i class="drop" style="--order: 2">2</i>
<i class="drop" style="--order: 3">3</i>

.drop 클래스에 대해서 
animation-delay: calc(var(--order) * 100ms);
와 같이 공통 속성에 한 번에 줄 수 있게 된다.
이렇게 만들면
3개의 아이템이 order에 입력된 숫자 * 100ms의 딜레이를 가지고 떨어지게 된다.


ol에 li가 아닌 그냥 h1 같은 태그에서도
숫자를 한번에 넣을 수 있다.
:root {
  counter-reset: headings;
}

h1 {
  counter-increment: headings;
}
h1::before {
  content: counter(headings);
}
와 같이 만들게 되면
h1의 내용 가장 앞 부분에 1씩 늘어나는 숫자가 들어가게 된다.



버튼이 있고, :focus 설정을 했을 때?
내부에 추가적인 것이 나타나면 포커스가 취소될 수 있다.
이 것을 해결하는 방법이
:focus-within 인데
이걸 사용하면, 자식요소까지 적용이 되기 때문에 훨씬 좋다.